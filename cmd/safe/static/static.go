// Code generated by "esc -o static/static.go -pkg static static/ui"; DO NOT EDIT.

package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/ui/confirm.ui": {
		name:    "confirm.ui",
		local:   "static/ui/confirm.ui",
		size:    3340,
		modtime: 1543075625,
		compressed: `
H4sIAAAAAAAC/9RXTW/bMAy991doug7OVy872C72gXbABuzSnQ1aZhwuiuRJtFvv1w921jVZlDpOC2y7
BIjFR/KRj7QcX91vtGjQebImkfPJTAo0yhZkykR+vb2O3sir9CJ+FUXiBg06YCzEHfFKlBoKFJeTxWIy
F1GUXsRkGN0SFKYXQsQOv9fk0AtNeSJLXr+Wj4EuJ4uZnPZ2Nv+GioXS4H0ib3j9gUDbUgoqEqmsWZLb
yM5SiLhytkLHrTCwwUQqMNnSqtrL9Bq0x3j6YBC257ZCmVa2qqshU4eefkCu8UTXG1uAlumtqwdN78gU
9i6rrCcma2SqsCtcZE1UgUPDQw4K9Oxsm3VtyLaQ0yJ3/LMVdeZFX+ThSBr5qSqoFelC9I03oKP+byKb
3N7/almowe92Tsc3NYSxjtAwbMvZoGNSoE8B+goUmVKmi6B1mB6oLlAGDmGHR5BpzWzNPt9zOYdwGlpb
c+a57VqEpjgK7FPff3Y84b3ZyxQYhVr+CQ5lk6OWgh0Yr6HXTSJb9DJ937s4llzIV/cr0/0UxuAb8tTr
NjQXJ7ZiLNShQmrQZwUuodY85CGebut/8LwCtSZTDkfE+wpMMT7TJWk9HvW4sWZPkQpmH08DCnyOKu36
WYr88unfUtP/q4X5S2ghRD9M/RjtUXtzy3kUZFD8AbIHRA8Ffyj2z1vN7mpd5wPvj5P0+VIvnRVoKo1M
PYPjU0EbcCWZTOOSZbqYjYQ5Klfn4NhWZ6Byy2w3Y4DH98xbh6K1tfC1w6uj7oDZUV4z+oMR+n30IF1r
OCrQKyka0DUm8iPqBrsbj5hfbu/Uu6IMu/4r8zZGnIP7ZXjc9jnuHD4exNOdb5afAQAA//+9M61KDA0A
AA==
`,
	},

	"/static/ui/sign.ui": {
		name:    "sign.ui",
		local:   "static/ui/sign.ui",
		size:    10387,
		modtime: 1543075641,
		compressed: `
H4sIAAAAAAAC/+xaTXPbNhO++1fsi/fSj0iy5KbtZCRm2qZJD51pp03PHBBYkaghgAWWstlf3yFlW3RM
iQTlKP5ITrGxu8DuPvvsAvT89eVKwxqdV9Ys2HR8ygCNsFKZdMH+ev929D17HZ3M/zcawTs06DihhAtF
GaSaS4Sz8Ww2nsJoFJ3MlSF0Sy4wOgGYO/ynUA49aJUsWErnX7PtRmfj2Smb1HI2+RsFgdDc+wV7R+dv
FNc2ZaDkgnmVGlaJAcxzZ3N0VILhK1wwwU28tKLwLHrLtcf55FqgXZ7KHFmU27zIu0QdevUvTzT2NL2y
kmsWvXdFp+iFMtJexLn1ipQ1LBJYRW1kzSjnDg11GZDoydkyrnIQb1T67Vz5H2eqEpd1hLt30kj7oiAy
peXm/5W25gIzqyW6yZXApCGxkYYaI4brUf3jgq0Te8lubNzBwo+N1XAItOaKu1SZWOOSWDQ9DVBxKs1C
dcjmgRqJJbKrvkrWKTTEN1BaoyMluO6j6HMulElZNGuVbk8WF9VGMXfIG1lpzVtBZM3t7A3NYJue5qUt
KPZUVvBEI3cq3gJp14G3pBMLbgRq9qFm21ES1AzIceM1rwtmwUr0LPqpNrHrZG221sqruuDaCrpnHENV
HQpUa/SxxCUvNHVZmE82wbvz+5yLc2XS7h3xMudGhp90qbQO19pS7ek+p1pPf4vBDoaUL5KVooMg9Wdt
4mFB6vECYnofgGhzv931XW4HMd/G5yCVzgpocfaOo3dR39WtB6PxvppEj1Y/tN0Pa/mD2/5BrT+Es36t
mec4rLI3l226Gdf1dcATd0Ec2C8zPbIzC1LeQ+N8GeS5VybVGGtlMF5Z2SfunMippCD0dxeby9e0Yg2N
JHrBYM11gQv2C+o1VqCCC6xKYTE7+w5eXt3aPiTL3bvdX3cIxssjmxeedO1181tYBf3Ovc8zxz2+OlYZ
TM+eEfanx8X+z4ZcuRmV85vMsod5Ycq4H6paH1dpReWAlCpz5W0sMu5Y9FVQZrevMzHhJbUW1W8GoQr/
hXUSyIIrNAJluAKuddhR84LivHC5rdJ4bfMYd4ijV8rsc5d4uIPWD5BaK2HLKeAzW2gJGV8jcAKN3BNM
v4WqprggdB64kZAgSLVcKlFoqkohLdB7+EKqVJF/Ab5cJVb7F4Akxl+Oj9aCZs+oBZ0d+bnGXjaf/6xZ
KreKg7rRPZTOsAIIugvuDkoY4xzEOoeG76AZ9eA5NfAdeIOlBgu96jS+nzTuaXbtIo99BLKfRA4ikuFk
Mnim3UMqO4kltI4aM24vdvmY9TVEPWh4PXiAHTzEvrFFohFEhnUyu3L+ZNA9+7ToflZdoseAG9Yi/sAR
lXl92WoOq2ThiiqgtIUDkVklcHz07jH73D32jaPD6usRj+bffIo773Y4R+esY0/9Y0OH8kd/2Ww14jB1
tjDyxsr/hRDi9OrfM7qdvny0345DPr12Ds/dn45v+9hY3C7MJ40/HfwvAAD//3x78TqTKAAA
`,
	},

	"/static/ui/tag.ui": {
		name:    "tag.ui",
		local:   "static/ui/tag.ui",
		size:    5321,
		modtime: 1543075654,
		compressed: `
H4sIAAAAAAAC/+xYS2/jNhC+51ew7LGQZStAURSSAvSR9FD00uxZGFFjmRua1JIjO95fv5Cc+BHTlpQX
YuzmFJvzzXBmvvmGcHx1P1dsgdZJoxM+GY05Qy1MIXWZ8E+318Fv/Cq9iH8KAnaDGi0QFmwpacZKBQWy
y1EUjSYsCNKLWGpCOwWB6QVjscUvtbTomJJ5wku6+4VvA12OojEPWzuTf0ZBTChwLuE3dPeXBGVKzmSR
cIKSN1aMxZU1FVpaMQ1zTLgAnU2NqB1Pr0E5jMNHA789rSrkaWWquuoytejkV8gV9nQ9NwUont7autN0
KXVhllllnCRpNE8FNkULjA4qsKipy0GBjqxZZU0LsjWkX+Qm/2wmG/OiLXB3JIV0qgpiJlWx/r9BKxA4
M6pAGz4YhDsWa2vWUkSDCtqPCV/k5p5vfBxQ4Y+d0+EU8PYKbCl1pnBKPJ2MB0CsLGdDMWSqgYjcEJl5
X5CxEjXBmkoLtCQFqD5AV4GQuuRp5LX2NwtEEygDi7DTFW/faiKj97v33A76cApWpqbM0aqhJ+riKHCP
pF0X3mhOJkALVPwp0HeTHBVnZEE7Be28JHyFjqd/ti6OXcznayGdbOfNN889yzgUalGgXKDLCpxCrajL
Qxyua3fwfQXiTuqyOyLeV6CL4TedSqWGo7ZKOz6VlPf2ewL2Uka5Op9LehGj/m9d/GDUR2HU5DUY5Uvf
n/qxtAcp5zrnQZDOEfIke5Do4dh0bftn8/m1lsyTjRyN+wJ7b+UhevJvKwvvM/Iny+TDzkDJUvPUEdhB
ArX7TorGz0A+dufXIdjjEvsfLhlB2dr9ftIlEFmZ14Tu8HD3+HHujKagQCc4W4CqMeH/oFpgQw02ueSh
J0J4PMTraebgVp/ZGv5bk11tt3BzG/4x9+YMXD/oGTd/8r7NX2vmpvlorbH8DJRwEr2ZEr65bHmdWCyt
qXWx8fKzEEKMH/6+I/WLzvbJOOTF1Tnw3S/G/Rx3DrcHcbjzg+O3AAAA//+JWV2gyRQAAA==
`,
	},

	"/static/ui/vault.ui": {
		name:    "vault.ui",
		local:   "static/ui/vault.ui",
		size:    25415,
		modtime: 1543100707,
		compressed: `
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
`,
	},

	"/static/ui": {
		name:  "ui",
		local: `static/ui`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static/ui": {
		_escData["/static/ui/confirm.ui"],
		_escData["/static/ui/sign.ui"],
		_escData["/static/ui/tag.ui"],
		_escData["/static/ui/vault.ui"],
	},
}
