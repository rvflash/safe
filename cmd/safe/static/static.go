// Code generated by "esc -o static/static.go -pkg static static/ui"; DO NOT EDIT.

package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/ui/confirm.ui": {
		name:    "confirm.ui",
		local:   "static/ui/confirm.ui",
		size:    3340,
		modtime: 1543075625,
		compressed: `
H4sIAAAAAAAC/9RXTW/bMAy991doug7OVy872C72gXbABuzSnQ1aZhwuiuRJtFvv1w921jVZlDpOC2y7
BIjFR/KRj7QcX91vtGjQebImkfPJTAo0yhZkykR+vb2O3sir9CJ+FUXiBg06YCzEHfFKlBoKFJeTxWIy
F1GUXsRkGN0SFKYXQsQOv9fk0AtNeSJLXr+Wj4EuJ4uZnPZ2Nv+GioXS4H0ib3j9gUDbUgoqEqmsWZLb
yM5SiLhytkLHrTCwwUQqMNnSqtrL9Bq0x3j6YBC257ZCmVa2qqshU4eefkCu8UTXG1uAlumtqwdN78gU
9i6rrCcma2SqsCtcZE1UgUPDQw4K9Oxsm3VtyLaQ0yJ3/LMVdeZFX+ThSBr5qSqoFelC9I03oKP+byKb
3N7/almowe92Tsc3NYSxjtAwbMvZoGNSoE8B+goUmVKmi6B1mB6oLlAGDmGHR5BpzWzNPt9zOYdwGlpb
c+a57VqEpjgK7FPff3Y84b3ZyxQYhVr+CQ5lk6OWgh0Yr6HXTSJb9DJ937s4llzIV/cr0/0UxuAb8tTr
NjQXJ7ZiLNShQmrQZwUuodY85CGebut/8LwCtSZTDkfE+wpMMT7TJWk9HvW4sWZPkQpmH08DCnyOKu36
WYr88unfUtP/q4X5S2ghRD9M/RjtUXtzy3kUZFD8AbIHRA8Ffyj2z1vN7mpd5wPvj5P0+VIvnRVoKo1M
PYPjU0EbcCWZTOOSZbqYjYQ5Klfn4NhWZ6Byy2w3Y4DH98xbh6K1tfC1w6uj7oDZUV4z+oMR+n30IF1r
OCrQKyka0DUm8iPqBrsbj5hfbu/Uu6IMu/4r8zZGnIP7ZXjc9jnuHD4exNOdb5afAQAA//+9M61KDA0A
AA==
`,
	},

	"/static/ui/sign.ui": {
		name:    "sign.ui",
		local:   "static/ui/sign.ui",
		size:    11272,
		modtime: 1543920824,
		compressed: `
H4sIAAAAAAAC/+xaXZPbNBe+31+hV1cv0CSbLAWmk6RDKS3MMAMD5dpzLJ/YYhXJSMfZNb+esbPbeDeO
bdlp2I/etSsdSefreR45mr++Xiu2Qeuk0Qs+HZ9zhlqYSOp4wf/88G70HX+9PJv/bzRi71GjBcKIXUlK
WKwgQnYxns3GUzYaLc/mUhPaFQhcnjE2t/h3Ji06pmS44DFdfsV3G12MZ+d8Us4z4V8oiAkFzi34e7p8
K0GZmDMZLbiTsebFNMbmqTUpWsqZhjUuuAAdrIzIHF++A+VwPrmdUD+f8hT5MjVplrZNtejkPxAq7Lj0
2kSg+PKDzVqnXkkdmasgNU6SNJovBRZRGxk9SsGiprYFInRkTR4UOQi2Jt12LvwPEllMj8oIt++kkJqi
IBKpou2/C2sFAhOjIrSTmwmTyoztbFbWiAY1Kv+74JvQXPOPa+zVwpvKqH8J1OYKbCx1oHBFfDk99zCx
Mk58bciknhahITLrrkbGStQE21LaoCUpQHUxdCkIqWO+nNXOrk8WiGKjACxCJSu1ecuIjL6bvb4ZrLNT
kJuMAkd5UZ6oo4OGd4q07cA70AkEaIGK37esO0qIijOyoJ2CsmEWPEfHlz+USxw6Wd1aG+lk2XB1Dd0x
jr6mFgXKDbogwhVkitpWmE+2wdv7ewriUuq4fUe8TkFH/iddSaX8rXZQe97kVO3p7yDY4JJyWbiWNKik
/iiXeFgl9XgLYnqMgqhzv971Q257Id/WZy+T1g6ocXbP0f2qb2Pr3tV4LJLoQPV96b4f5fem/UHU74NZ
v5TIcxpUacxlnW0CqrwOOALrhYHdMtMhOzMv4wYYh5WX507qWGGgpMZgbaIucQciK8OM0O0PVodvYcVo
GkXoBGcbUBku+E+oNlgUFbvCohUWs4tv2cubW9t9sDy82/HYwbteHpleeNK9145vfh30GziXJhYcvjpV
G0wvnlHtT09b+z9qsvlWKqcfM8sf5oUpAdfXtDyuVJLyHimV+sbbQCRg+fJLr8zuvs4EhNdU21S/amRF
+K+MjRgZZjOFjBJcM1DK76hpRkGa2dQUabxd8xR3iJN3yuwzSzxcofU9i42J2A5TmEtMpiKWwAYZEFMI
jtj0G1b0FAhC6xjoiIXIIrlaSZEpKlohztA59v9IxpLcC+bydWiUe8GQxPiL8ckoaPaMKOjixJ9rzHX1
85/RK2nXgRcbHaF1+jWA113wcFD8EGcQ6gwN3yCNOlinen4H3tZSBYVetS7eDBpH0q5t4NEEIM0gMghI
+oNJb03bACoHgcW3jyoatxO6fMr+6mPuJV4HC9jeIvatyUKFTCRYJrMt50+mumf/bXU/K5boIHD9KOJ3
HFGelpetqlglw26gguUms0wkRgocn5w9Zp/Zo0mO9uuvRyzNvz6tNP9Zr8wbsBV5jtYaG4QFi3S/CXuH
aZCeR+cgxmD77Kg8b7sg33txIYwm1LT/5MLnR7gnAMMHiaiJjO6VCz9kPzAyx4iOH1uUI12W7MIEx6SD
TpzQxgvt3DDkDcFwiuj9o1EHqmiUY5+CTvu0/jHY9OXR1Wp9bB7Kgw2f9w6tN9b29xp3fawM7gbmk8p7
3X8DAAD//zOtVd0ILAAA
`,
	},

	"/static/ui/tag.ui": {
		name:    "tag.ui",
		local:   "static/ui/tag.ui",
		size:    6264,
		modtime: 1543926426,
		compressed: `
H4sIAAAAAAAC/+xZTW/jNhC951ewvBaKPwIURWFpgW272wJFL92ehRE1ltnQpEqOnLi/vpDcrO01JYqW
sUiA3pJw3pDzZvheaK/ePW8V26F10uiUL+7nnKEWppS6Svmfnz4k3/N32d3qmyRhH1GjBcKSPUnasEpB
iezhfrm8X7Akye5WUhPaNQjM7hhbWfy7kRYdU7JIeUWP3/LjRg/3yzmfdXGm+AsFMaHAuZR/pMefJChT
cSbLlBNUvI1ibFVbU6OlPdOwxZQL0PnaiMbx7AMoh6vZS4A/nvY18qw2dVOHQi06+Q8UCkem3poSFM8+
2SYY+iR1aZ7y2jhJ0mieCWxJS4xOarCoKZSgREfW7PO2BfkBMm7ntv58I9vwsiM4vJNCGmJBbKQqDz+3
aAUCN0aVaGf/BcxOIg7RrBsRDSrpfk35rjDP/HOOi1F4f7IaPwLeXoGtpM4Vrolni3kExMpqE4shU0ci
CkNktmNBxkrUBIdR2qElKUCNAboahNQVz5beaH+zQLQb5WARTrri7VtDZPR5967toA+nYG8ayh3t2/FE
XfYCz4Y0dODPmpML0AIV/xLoO0mBijOyoJ2C7r6kfI+OZz92KfoO5su1k0529813n0fSGAu1KFDu0OUl
rqFRFMqwmh24u/h7DeJR6iq8Iz7XoMv4k66lUvGoo9LOh4rynv5MwKZOlGuKraRJE/VHl+L/iXotE7W4
xUT5yveX3ld2lHIeao6CBK+Qp9iLQi+vTcjtr57nW5nMF468nI8FjnblGD35rZOFr3PlB2nyYTegZKV5
5ghslECd/p+0nF+BfOnOdzHYfon9HZ8YQdXF/TCYEoisLBpCd7l4uvxy74ympEQnONuBajDlv6DaYTsa
bPHAZ54dZv1b3E4zo1v9xmz4Z012f3Th9jT8dfrmBtw46Btu/uLrNv9XvTbvwR7bj9YamxdgY2YgmqUp
SrpF56DC/PBxRXfea/V0Mayn/jeeMJpQ0+UjL8a2J1+rqaxO8qj+CQu58/mc8T74RGJuQU6cK3YrY1KG
bPFKf1z6/HGUUYY0M6ydUx8d06R0kp8GpHVQYsO0DVM2ha7rqeqnaTkMHaCojx4/N6/lhRfzQAr6c/iB
d17jyeJxYTU7+X7g3wAAAP//86EQXXgYAAA=
`,
	},

	"/static/ui/vault.ui": {
		name:    "vault.ui",
		local:   "static/ui/vault.ui",
		size:    26239,
		modtime: 1543926910,
		compressed: `
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
`,
	},

	"/static/ui": {
		name:  "ui",
		local: `static/ui`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static/ui": {
		_escData["/static/ui/confirm.ui"],
		_escData["/static/ui/sign.ui"],
		_escData["/static/ui/tag.ui"],
		_escData["/static/ui/vault.ui"],
	},
}
