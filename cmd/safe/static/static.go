// Code generated by "esc -o static/static.go -pkg static static/ui"; DO NOT EDIT.

package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/ui/app.ui": {
		name:    "app.ui",
		local:   "static/ui/app.ui",
		size:    11166,
		modtime: 1542707716,
		compressed: `
H4sIAAAAAAAC/+xaX1PjNhB/51Ooeu0kIWHmeg+JmV6Po51jjs5Aj0fPWto4ahTJleSE9NN3YgdIsB3L
NjDQ4+0OaWXt7u+32j8Zn94uJFmisUKrCR32jylBxTQXKp7Qv66/9D7S0+Bo/FOvR85RoQGHnKyEm5FY
Akdy0h+N+kPS6wVHY6EcmikwDI4IGRv8JxUGLZEimtDYzX+mDx866Y+O6SDbp6O/kTnCJFg7oedufiMU
1ytKBJ9QSBK62UXIODE6QePWRMECJ3QprIgk0uDapDge3K2Wb3brBGlwfv01vPnj2+fLm/D68s+Ls+9n
F3WCq+wuYaKtcEIrGjDcKFknxnEKqXThSnA3o8HH42NfiRmKeOZo8KFeZKE5SBp8AWlrDWDQin+h2l5s
JiTP/70RlsBwpiVHM9huGOzseLS74MBP+vbee2Gkb+nd1oZeLBNgoMKpZqmtULxMRhuBykHuwCUaJxjI
UsE9xcqV+6YdRlrPcw0dxKEU1tFdoRZq1qjaRAzVxs9hopM0qZEsqFvtz8e7WurY1qWdXXtY5yZ6d9K9
q/6lcQBMLFQocepoMDxuKW7yuNNa3umkg3SkndMLrwMqHVjuxCsEw2Znypl1TtllFmdt9mdadU5HF3eg
8xN6uuyIxIgFmHUomFbh5k80QC5cbyoU79n1ItJSsM4HA3NiCS5/cLxAXXukRbV5g5edDnx410KHt44S
Z0BZmd90QtdoaZADhgDJgEL6/X7f61tWxArk9ks5vHpsBipGTskMFJdoHqGP2BUkCfIJVZoOKjE9yEFd
uZ4AmwsV+9sBbxNQvIMhp0LK9jB+yKY8IDweHFRvLzHpGis+pc5ptRsmgPMGMUJChLIUVL9y3sZSryHo
GGQolmjDbYr6suFrj1VMCjYvodPGSz88l4bPyaVDdjtss072KrdVK1HvoHPASJUGapJVXhvE7wJXu2Gm
pIR47lTTSzxTi2R1vQLZy/67edwkstyW3qF1o/XVvdzgbQOwjem9idocf+W2Kd289ahbJ7gpXiNaX/1d
ZI/aK63/ql/cBGIkB0xdBahqMBWaShCFXgGpwqMHHFS8VKEj8+7mBzePntPNnsR9q+iALCL3rAPj3jpM
GiSYXbog/ui8gulhBcA5I6LUoS19Cu6X754frVyPo2WULEGmOKG/o1yiEwzIKuscT0Ynv5Dhh7IXdjyo
/tqrjob7SEXFPXC6W8oB56GDmHbxZE0B9xzwbyravFB7ShL4twE7tQDrCkIHcWjTaCFcTUX4KhFfdqny
C7XKaptns42rqBJdC3r6jFl2+St1rNO6EUs1dS8ycV8NX3JU04yxLV+7tiRvR/DW5K4j9hYE1aR+Q9wZ
tuXOvo47i7sLRTJ9FiB1nJOJaTUVZlExVa/LvsoG6+FMKEcDnn3kKSbLhYbDcneIXDene9mJ8SNBmwAT
KqbBqHq+XFAvT2xCMAjUJyoW55Jtk+hiEF3r1IXWrTcREBXvPDreCeNb5IUMFPOqIapD+m/ZEU2SjHzU
tX+F/1tC1z2luYuETW/q1xZr1ZJ9gvLYC5V63gmRl1/f0fRa0DR8s6l4I5EXy8Xzns8eW2T0zL94amSJ
GUgRKxpkTaxW6fOoZfo8apU+j9qmz/6CBzoZBslap8SmBk8rjzvQKmrSlBqe0EJHsvzo9/Q9WxgPdn5F
+18AAAD//+7zreieKwAA
`,
	},

	"/static/ui/sign.ui": {
		name:    "sign.ui",
		local:   "static/ui/sign.ui",
		size:    10662,
		modtime: 1542665811,
		compressed: `
H4sIAAAAAAAC/+xa3XLbNhO9z1Psh++mP5FkyU3ayUjKtE2TXnSmnTa95qyAFYkaAlhgKVt9+g4p2ZIq
SiQkR4nt5Co2cfCze/bsAenh65uZgTn5oJ0diX73QgBZ6ZS26Uj8+f5t5zvxevxs+L9OB96RJY9MCq41
Z5AaVASX3cGg24dOZ/xsqC2Tn6Kk8TOAoae/C+0pgNGTkUj56muxXuiyO7gQvWqcm/xFkkEaDGEk3vHV
G43GpQK0GomgUyvKYQDD3LucPC/A4oxGQqJNpk4WQYzfogk07N0OqB/Pi5zEOHd5kTcN9RT0Pzgx1HLq
mVNoxPi9LxqHXmur3HWSu6BZOyvGksqodZzt5OjJctMEigJ7t0jKHCRLSLuVy/MnmS6HqyrCzSsZ4kNR
kJk2avn/Em1QUuaMIt9bDehtjFiOhoojFk2n+nEk5hN3I+7m2OHCDxtP4ylQmyv0qbaJoSmLcf8iAuJ1
msVi2OWRiIljdrO2IOc1WcYllebkWUs0bYAhR6ltKsaD2tH1yUJZLpSgJ9zISm3eCmZnt7N3bAbrcAYX
ruAk8KKkJ1m1F7hF0qYNr0UnkWglGfFfZN1WJmQEsEcbDFYFMxILCmL8YzXFvp3VzTXXQVcFV1fQLeMY
C/UkSc8pJIqmWBhuMUMZIDS3Sxstr0gJyNAqQ347fhCuMc9JjYR1oreTh94yETu/z1FeaZs2755ucrQq
/tRTbUw8ai3bF/thw17t7rfU8GR6hmIy03wSPf+opnii9FzF77HSs38f9Kw7fv3R9x07StOXZ46CNNZj
zWF3Drpbg00+5OjauK/2t2ViXkaiVj4mFlZZmVjQrZtpjWttaGLU85dKA8+jbwfzWIfN0FSXnMDoo9S4
2WK2TM4gCnygoeA06uRB29RQYrSlZOZUm7gjs9eTginsPtx8fCspznJHUZAC5mgKGomfycypJBVcU1kH
o8Hlt/DiYlf7S6HYv9r9dYZovjww5/Koa+/wZS2+gn7DEPLMY6BX5yqD/uUT4n7/vNz/ybJfLE17fpdZ
8Wn67AzDKdD27rzurNpoXhzBB21XoUpkhl6Mv4qixfqFVcJ0w7UV+aslKHN37bwCduALQ8AZzQCNidtq
XnCSFz53JQdu5zxEyAdbZoPPLebTdWnfQ+qcgrUgQchcYRRkOCdABkMYGPovoawplEw+AFoFEwKlp1Mt
C8NlKaQFhQBfKJ1qDs8hLGYTZ8JzIJbdL7tn61+DJ9S/Ls/81sndbL4RdXaq/SyJamX3UDrHFUDURXJ/
UOIU5yTVOTV8Jxnck01u5KvxJZc2VOhV4+SHReOejG+TeBwSkMMicpKQHC8mRxviA6KyV1hi62jDILdS
lw9ZX8fAo8zryQb2aBP7xhUTQyAzqpLZlPNHw+7Bx2X3k+oSLQxuXIv4nTq8yKvL1qZZZQcrqYCFKzzI
zGlJ3bN3j8Hn7nHIjh5XXw/Ymn/zMe68a3NO3jsvHvuXigbwB38tWjuJp9S7wqq7Wf4vpZQXq39P6Hb6
4sF+dI75Zttonpu/OW+fcePh+sGwt/HXlP8GAAD//wdxAhumKQAA
`,
	},

	"/static/ui/tag.ui": {
		name:    "tag.ui",
		local:   "static/ui/tag.ui",
		size:    5375,
		modtime: 1542665580,
		compressed: `
H4sIAAAAAAAC/+RYTY/jNgy9z69Q2WPhceIBiqKwvUA/dnsoeun2bNASY6ujSK5EJ5N/X9iZj2TtrO3Z
2UWnO6dJxEeRfOQTkfTN3daIHfmgnc1gfb0CQVY6pW2VwV/v30Y/wJv8Kv0misQ7suSRSYm95lpUBhWJ
m+skuV6LKMqvUm2Z/AYl5VdCpJ7+abWnIIwuM6j49jt4uujmOllB3Nu58m+SLKTBEDJ4x7e/aDSuAqFV
BowVdFZCpI13DXk+CItbykCiLTZOtgHyt2gCpfGDwbg9HxqCvHFN20yZbp1CA/l730563Wur3L5oXNCs
nYVcUleEyNmoQU+WpxwoCuzdoehKWhwh827u8ilq3ZmrvmADgKy1Ucf/O7hBSbUzinx8bxCfWBytRU+h
RRP1HzPYle4OHn0MqPrp5HQ5RaO1R19pWxjaMOTr1QKI11W9FMOuWYgoHbPbzgU5r8kyHltjR561RDMH
GBqU2laQJ6PW42Sh7C4q0BOesDLKW8vs7Dl7z2VwDGfw4FouAh8MQU5WXQSeNelUwI+aUEi0kgx8CByL
pCQDgj3aYJCxNJTBgQLkP/cuLgU25mungy67hMbmc2YZl0I9SdI7CoWiDbaGZ3gIurJoHq42Wt6SAlGj
VYb8WflE2GPTkMrAOogHLMRHGgbfNyhvta2mg6e7Bq1anvRGG7Mc9STCq8uwNB6N/kwLP7U5Q1tuNX9S
c/7Zu/g6m/O+fP/X5ly/RHOOpT+e+qW0F+n5MedFkMlpHEl2kOhwAqd2kGePxks9fR/sCclqLnD2rrBE
mn7vFebLqMdHyzSGrdHoykIeGP0irTvd3pLVM5AP7Hy/BHtZrf+gvWCsersfP+oSmb0uW6YwPDw9fpg7
ZzlSFCSIHZqWMviNzI661hDrm6EqdiN0+YqX08zFVL+yF/1Xy/7w9KB30cB/8wmuMcyDvmLy11+W/KNm
PpJP3jsPr0AJ18lnU8LPLlujTjxV3rVWPXr5VkopV/d/X5H6Ja92ZVyycU0O/PTGeJ7jyeHTQRqf/Ez5
bwAAAP//LYmRBf8UAAA=
`,
	},

	"/static/ui/vault.ui": {
		name:    "vault.ui",
		local:   "static/ui/vault.ui",
		size:    25298,
		modtime: 1542665350,
		compressed: `
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
`,
	},

	"/static/ui": {
		name:  "ui",
		local: `static/ui`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static/ui": {
		_escData["/static/ui/app.ui"],
		_escData["/static/ui/sign.ui"],
		_escData["/static/ui/tag.ui"],
		_escData["/static/ui/vault.ui"],
	},
}
